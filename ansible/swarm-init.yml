- name: Initialize Docker Swarm on First Manager
  hosts: managers[0]  # Targets the first manager.
  become: true
  tasks:
    - name: Set first manager IP fact
      set_fact:
        first_manager_ip: "{{ ansible_default_ipv4.address }}"
      run_once: true

    - name: Check Docker Swarm status  # Checks if the host is part of a Swarm.
      ansible.builtin.shell: docker info --format '{{ "{{.Swarm.LocalNodeState}}" }}'
      register: docker_swarm_status
      changed_when: false

    - name: Initialize Docker Swarm  # Initializes the Swarm if not already active.
      ansible.builtin.shell:
        cmd: docker swarm init --advertise-addr {{ first_manager_ip }}
      when: "'inactive' in docker_swarm_status.stdout"  # Conditional execution
      register: swarm_init
      changed_when: "'Swarm initialized' in swarm_init.stdout"

    - name: Retrieve Docker Swarm manager token  # Gets token for joining as a manager
      ansible.builtin.shell: docker swarm join-token manager -q
      register: manager_token
      changed_when: false

    - name: Retrieve Docker Swarm worker token  # Gets token for joining as a worker
      ansible.builtin.shell: docker swarm join-token worker -q
      register: worker_token
      changed_when: false

    - name: Set manager join token fact
      set_fact:
        manager_join_command: "docker swarm join --token {{ manager_token.stdout }} {{ first_manager_ip }}:2377"

    - name: Set worker join token fact
      set_fact:
        worker_join_command: "docker swarm join --token {{ worker_token.stdout }} {{ first_manager_ip }}:2377"


- name: Join workers to Docker Swarm
  hosts: workers
  become: yes
  tasks:
    - name: Check if node is part of a swarm  # Verifies if the node is already in a Swarm
      ansible.builtin.shell: docker info --format '{{ "{{.Swarm.LocalNodeState}}" }}'
      register: swarm_state
      changed_when: false

    - name: Join Swarm as worker if not already part of a swarm  # Joins the Swarm as a worker
      ansible.builtin.shell:
        cmd: "{{ hostvars[groups['managers'][0]]['worker_join_command'] }}" 
      when: swarm_state.stdout != 'active'
      register: swarm_join
      changed_when: "'This node joined a swarm as a worker' in swarm_join.stdout"
